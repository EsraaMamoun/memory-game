{"version":3,"sources":["components/SingleCards.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","className","src","alt","onClick","cardImages","matched","App","useState","cards","setCards","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","useEffect","prevCards","map","resetTurn","setTimeout","console","log","prevTurn","shuffledCards","sort","Math","random","id","ReactDom","render","StrictMode","document","getElementById"],"mappings":"qQAqBeA,MAnBf,YAAsD,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,QAMtC,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAWD,EAAU,UAAY,GAAtC,UACI,qBAAKC,UAAU,QAAQC,IAAKJ,EAAKI,IAAKC,IAAI,eAC1C,qBAAKF,UAAU,OACfC,IAAI,2BACJE,QAVQ,WAChBL,EAAaD,IAULK,IAAI,oBCTdE,EAAa,CACf,CAAE,IAAO,6BAA8BC,SAAS,GAChD,CAAE,IAAO,6BAA8BA,SAAS,GAChD,CAAE,IAAO,2BAA4BA,SAAS,GAC9C,CAAE,IAAO,6BAA8BA,SAAS,GAChD,CAAE,IAAO,6BAA8BA,SAAS,GAChD,CAAE,IAAO,4BAA6BA,SAAS,IA0EpCC,MAvEf,WAEI,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAcG,GAAd,WACA,EAAkCH,mBAAS,MAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,mBAAS,MAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAYMhB,EAAe,SAACD,GAClBc,EAAYG,EAAajB,GAAQe,EAAaf,IAGlDkB,qBAAU,WAEHJ,GAAaE,IAETF,EAAUV,MAAQY,EAAUZ,KAC3BQ,GAAS,SAAAO,GACL,OAAOA,EAAUC,KAAI,SAAApB,GACjB,OAAIA,EAAKI,MAAQU,EAAUV,IAChB,2BAAIJ,GAAX,IAAiBQ,SAAS,IAEnBR,QAInBqB,KAEAC,YAAW,kBAAMD,MAAa,QAGvC,CAACP,EAAWE,IAEfO,QAAQC,IAAIb,GAGZ,IAAMU,EAAY,WACdN,EAAa,MACbE,EAAa,MACbJ,GAAS,SAAAY,GAAQ,OAAIA,EAAW,MAGpC,OACI,sBAAKtB,UAAU,MAAf,UACI,6CACA,wBAAQG,QA/CK,WACjB,IAAMoB,EAAgB,UAAInB,EAAeA,GACpCoB,MAAK,kBAAMC,KAAKC,SAAW,MAC3BT,KAAI,SAACpB,GAAD,mBAAC,eAAeA,GAAhB,IAAsB8B,GAAIF,KAAKC,cAExCjB,EAASc,GACTb,EAAS,IAyCL,sBAEA,qBAAKV,UAAU,YAAf,SACKQ,EAAMS,KAAI,SAAApB,GAAI,OACX,cAAC,EAAD,CAEIA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASc,GAAad,IAASgB,GAAahB,EAAKQ,SAHrDR,EAAK8B,aCnElCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7c0ecd6d.chunk.js","sourcesContent":["import './SingleCards.css';\n\nfunction SingleCard({ card, handleChoice, flipped }) {\n\n    const handleClick = () => {\n        handleChoice(card);\n    }\n    \n    return (\n        <div className=\"card\">\n            <div className={flipped ? \"flipped\" : \"\"}>\n                <img className=\"front\" src={card.src} alt=\"card front\" />\n                <img className=\"back\" \n                src=\".../public/img/cover.png\" \n                onClick={handleClick}\n                alt=\"card back\" />\n            </div>\n        </div>\n    );\n}\n\nexport default SingleCard;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCards';\n\n\n\nconst cardImages = [\n    { \"src\": \"../public/img/helmet-1.png\", matched: false },\n    { \"src\": \"../public/img/potion-1.png\", matched: false },\n    { \"src\": \"../public/img/ring-1.png\", matched: false },\n    { \"src\": \"../public/img/scroll-1.png\", matched: false },\n    { \"src\": \"../public/img/shield-1.png\", matched: false },\n    { \"src\": \"../public/img/sword-1.png\", matched: false }\n]\n\nfunction App() {\n\n    const [cards, setCards] = useState([]);\n    const [turns, setTurns] = useState(0);\n    const [choiceOne, setChoiceOne] = useState(null);\n    const [choiceTwo, setChoiceTwo] = useState(null);\n\n    const shuffleCards = () => {\n        const shuffledCards = [...cardImages, ...cardImages]\n            .sort(() => Math.random() - 0.5)\n            .map((card) => ({ ...card, id: Math.random() }));\n\n        setCards(shuffledCards);\n        setTurns(0);\n    }\n\n\n    const handleChoice = (card) => {\n        choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n    }\n\n    useEffect(() => {\n        \n        if(choiceOne && choiceTwo) {\n\n            if(choiceOne.src === choiceTwo.src) {\n                setCards(prevCards => {\n                    return prevCards.map(card => {\n                        if (card.src === choiceOne.src) {\n                            return {...card, matched: true}\n                        } else {\n                            return card\n                        }\n                    })\n                })\n                resetTurn();\n            } else {\n                setTimeout(() => resetTurn(), 1000)\n            }\n        }\n    }, [choiceOne, choiceTwo]);\n\n    console.log(cards);\n\n    \n    const resetTurn = () => {\n        setChoiceOne(null);\n        setChoiceTwo(null);\n        setTurns(prevTurn => prevTurn + 1);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1>Magic Match</h1>\n            <button onClick={shuffleCards}>New Game</button>\n            \n            <div className=\"card-grid\">\n                {cards.map(card => (\n                    <SingleCard \n                        key={card.id} \n                        card={card}\n                        handleChoice={handleChoice}\n                        flipped={card === choiceOne || card === choiceTwo || card.matched}\n                    />\n                ))}\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\n\n\nReactDom.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}